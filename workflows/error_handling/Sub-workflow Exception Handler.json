{
  "name": "Sub-workflow Exception Handler",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "error",
              "type": "any"
            },
            {
              "name": "workflowName"
            },
            {
              "name": "nodeName"
            },
            {
              "name": "relatedEntityId"
            },
            {
              "name": "relatedEntityType"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -16,
        0
      ],
      "id": "ff809180-ae3b-4813-a6a1-ed2ef638fae8",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node: Error Data Normalization\n// Place this node immediately after the \"When Executed by Another Workflow\" trigger\n\nconst items = $input.all();\nconst outputItems = [];\n\n// Helper functions for safe data extraction\nfunction safeGet(obj, path, defaultValue = null) {\n  return path.split('.').reduce((curr, prop) => \n    (curr && curr[prop] !== undefined) ? curr[prop] : defaultValue, obj);\n}\n\nfunction generateErrorLogId() {\n  // Generate a proper UUID v4 for SQL Server uniqueidentifier\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nfunction sanitizeForSQL(text) {\n  if (!text) return null;\n  return String(text)\n    .replace(/'/g, \"''\")      // Escape single quotes\n    .replace(/\\\\/g, \"\\\\\\\\\")   // Escape backslashes\n    .replace(/\\0/g, \"\")       // Remove null characters\n    .trim();\n}\n\nfunction truncateText(text, maxLength) {\n  if (!text) return null;\n  const str = String(text);\n  if (str.length <= maxLength) return str;\n  return str.substring(0, maxLength - 3) + '...';\n}\n\n// Clean text function for display purposes (no SQL escaping)\nfunction cleanText(text) {\n  if (!text) return null;\n  return String(text)\n    .replace(/\\0/g, \"\")       // Remove null characters\n    .trim();\n}\n\n// Process each error item\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  \n  try {\n    console.log(`Processing error item ${i + 1}/${items.length}`);\n    \n    // Get data from input parameters (preferred) or fallback to payload\n    const triggerData = $('When Executed by Another Workflow').item.json;\n    const errorData = safeGet(item, 'json.error') || safeGet(item, 'json');\n    \n    // Extract from input parameters with payload fallbacks\n    const workflowName = triggerData.workflowName || \n                        safeGet(item, 'json.workflow.name') || \n                        'Unknown Workflow';\n    \n    const nodeName = triggerData.nodeName || \n                    safeGet(item, 'json.node.name') || \n                    null;\n    \n    const executionId = triggerData.executionId || \n                       safeGet(item, 'json.execution.id') || \n                       safeGet(item, 'json.executionId') || \n                       null;\n    \n    const workflowId = triggerData.workflowId || \n                      safeGet(item, 'json.workflow.id') || \n                      null;\n    \n    const mode = triggerData.mode || \n                safeGet(item, 'json.execution.mode') || \n                safeGet(item, 'json.mode') || \n                null;\n    \n    const relatedEntityId = triggerData.relatedEntityId || \n                           safeGet(item, 'json.relatedEntityId') || \n                           null;\n    \n    const relatedEntityType = triggerData.relatedEntityType || \n                             safeGet(item, 'json.relatedEntityType') || \n                             null;\n    \n    console.log('Raw error data type:', typeof errorData);\n    console.log('Raw error data:', JSON.stringify(errorData, null, 2));\n    \n    // Normalize error data based on type\n    let normalizedError = {\n      message: null,\n      name: null,\n      stack: null,\n      code: null,\n      rawError: null\n    };\n    \n    if (typeof errorData === 'string') {\n      // Handle string errors\n      normalizedError.message = errorData;\n      normalizedError.name = 'StringError';\n      normalizedError.rawError = errorData;\n      \n      // Try to extract more details from string if it contains structured info\n      if (errorData.includes('Error:') && errorData.includes('node')) {\n        const parts = errorData.split('Error:');\n        if (parts.length > 1) {\n          normalizedError.message = parts[1].trim();\n        }\n      }\n      \n    } else if (typeof errorData === 'object' && errorData !== null) {\n      // Handle object errors\n      normalizedError.message = errorData.message || 'Unknown error';\n      normalizedError.name = errorData.name || 'ObjectError';\n      normalizedError.stack = errorData.stack || null;\n      normalizedError.code = errorData.code || null;\n      normalizedError.rawError = JSON.stringify(errorData);\n      \n    } else {\n      // Handle unexpected error formats\n      normalizedError.message = 'Unknown error format';\n      normalizedError.name = 'UnknownError';\n      normalizedError.rawError = String(errorData);\n    }\n    \n    // Build normalized output for SQL insertion\n    const normalized = {\n      // SQL Table Fields (with SQL sanitization)\n      ErrorLogId: generateErrorLogId(),\n      WorkflowName: truncateText(workflowName, 100),\n      NodeName: truncateText(nodeName, 100),\n      ErrorMessage: truncateText(normalizedError.message, 4000),\n      ErrorDetails: truncateText(normalizedError.rawError, 4000),\n      RelatedEntityId: relatedEntityId,\n      RelatedEntityType: truncateText(relatedEntityType, 50),\n      OccurredDate: new Date().toISOString(),\n      IsResolved: false,\n      WorkflowId: workflowId,\n      StackTrace: truncateText(normalizedError.stack, 4000),\n      Mode: truncateText(mode, 50),\n      ExecutionId: truncateText(executionId, 150),\n      \n      // SQL-safe versions (only used for SQL insertion)\n      WorkflowNameSanitized: sanitizeForSQL(workflowName),\n      NodeNameSanitized: sanitizeForSQL(nodeName),\n      ErrorMessageSanitized: sanitizeForSQL(normalizedError.message),\n      ErrorDetailsSanitized: sanitizeForSQL(normalizedError.rawError),\n      StackTraceSanitized: sanitizeForSQL(normalizedError.stack),\n      \n      // Slack context (clean but NOT SQL-escaped for proper JSON handling)\n      slackContext: {\n        errorType: normalizedError.name,\n        errorCode: normalizedError.code,\n        workflowName: cleanText(workflowName),\n        nodeName: cleanText(nodeName) || 'Unknown Node',\n        executionId: cleanText(executionId) || 'Unknown',\n        timestamp: new Date().toISOString(),\n        shortMessage: truncateText(cleanText(normalizedError.message), 200),\n        hasStackTrace: !!normalizedError.stack\n      },\n      \n      // Processing metadata\n      processingMetadata: {\n        normalizedAt: new Date().toISOString(),\n        originalErrorType: typeof errorData,\n        itemIndex: i,\n        workflowNameSource: triggerData.workflowName ? 'input_parameter' : 'payload',\n        nodeNameSource: triggerData.nodeName ? 'input_parameter' : 'payload',\n        executionIdSource: triggerData.executionId ? 'input_parameter' : 'payload'\n      }\n    };\n    \n    // Validate required fields\n    if (!workflowName || !normalized.ErrorMessage) {\n      normalized._error = {\n        type: 'validation_error',\n        message: 'Missing required fields for error log',\n        missingFields: {\n          workflowName: !workflowName,\n          errorMessage: !normalized.ErrorMessage\n        }\n      };\n    }\n    \n    console.log(`Normalized error for ${workflowName}: ${normalized.ErrorMessage.substring(0, 100)}...`);\n    \n    outputItems.push({\n      json: normalized,\n      pairedItem: i\n    });\n    \n  } catch (processingError) {\n    console.error(`Failed to process error item ${i}:`, processingError.message);\n    \n    // Create minimal error item to maintain workflow flow\n    outputItems.push({\n      json: {\n        ErrorLogId: generateErrorLogId(),\n        WorkflowName: 'Error Processing Failed',\n        NodeName: null,\n        ErrorMessage: `Failed to process error data: ${processingError.message}`,\n        ErrorDetails: JSON.stringify(item.json),\n        RelatedEntityId: null,\n        RelatedEntityType: null,\n        OccurredDate: new Date().toISOString(),\n        IsResolved: false,\n        WorkflowId: null,\n        StackTrace: processingError.stack,\n        Mode: null,\n        ExecutionId: null,\n        \n        _error: {\n          type: 'processing_error',\n          message: processingError.message,\n          originalItem: item.json\n        },\n        \n        slackContext: {\n          errorType: 'ProcessingError',\n          workflowName: 'Error Handler',\n          nodeName: 'Error Normalization',\n          executionId: 'Unknown',\n          timestamp: new Date().toISOString(),\n          shortMessage: `Processing failed: ${processingError.message}`,\n          hasStackTrace: true\n        }\n      },\n      pairedItem: i\n    });\n  }\n}\n\nconsole.log(`Processed ${outputItems.length} error items`);\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        0
      ],
      "id": "caa525fe-1793-42ea-bcfe-2a13b6fe477d",
      "name": "Error Normalization"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO [dbo].[ErrorLogs]\n(\n    [ErrorLogId],\n    [WorkflowName], \n    [NodeName],\n    [ErrorMessage],\n    [ErrorDetails],\n    [RelatedEntityId],\n    [RelatedEntityType],\n    [OccurredDate],\n    [IsResolved],\n    [WorkflowId],\n    [StackTrace],\n    [Mode],\n    [ExecutionId]\n)\nVALUES\n(\n    NEWID(),\n    '{{ $json.WorkflowNameSanitized }}',\n    '{{ $json.NodeNameSanitized }}',\n    '{{ $json.ErrorMessageSanitized }}',\n    '{{ $json.ErrorDetailsSanitized }}',\n    {{ $json.RelatedEntityId ? \"'\" + $json.RelatedEntityId + \"'\" : \"NULL\" }},\n    {{ $json.RelatedEntityType ? \"'\" + $json.RelatedEntityType + \"'\" : \"NULL\" }},\n    GETUTCDATE(),\n    0,\n    {{ $json.WorkflowId || \"NULL\" }},\n    '{{ $json.StackTraceSanitized }}',\n    {{ $json.Mode ? \"'\" + $json.Mode + \"'\" : \"NULL\" }},\n    '{{ $json.ExecutionId }}'\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        608,
        0
      ],
      "id": "b2e30c12-3d3e-4b5d-b6a0-03b035cc3a31",
      "name": "Insert in Database",
      "credentials": {
        "microsoftSql": {
          "id": "4bkXFlb3UysWQwAd",
          "name": "RiN8N SQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node: Slack Error Notification Block Builder\n// Place this after SQL insertion to send Slack notifications\n\nconst items = $('Error Normalization').all();\n\n// Helper functions for Slack Block Kit\nfunction safeSlackText(text, maxLength = 150) {\n  if (!text) return \"N/A\";\n  if (typeof text !== 'string') text = String(text);\n  \n  const truncated = text.length <= maxLength ? text : text.substring(0, maxLength - 3) + \"...\";\n  \n  return truncated\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\nfunction createHeaderBlock(title) {\n  return {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": safeSlackText(title, 150), // REMOVED JSON.stringify()\n      \"emoji\": true\n    }\n  };\n}\n\nfunction createKeyValueSection(key, value) {\n  return {\n    \"type\": \"rich_text\",\n    \"elements\": [\n      {\n        \"type\": \"rich_text_section\",\n        \"elements\": [\n          {\n            \"type\": \"text\",\n            \"text\": `${key}: `,\n            \"style\": { \"bold\": true }\n          },\n          {\n            \"type\": \"text\",\n            \"text\": safeSlackText(value, 300) // REMOVED JSON.stringify()\n          }\n        ]\n      }\n    ]\n  };\n}\n\nfunction createErrorSection(errorMessage, maxLength = 500) {\n  return {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": `*Error Message:*\\n\\`\\`\\`${safeSlackText(errorMessage, maxLength)}\\`\\`\\`` // REMOVED JSON.stringify()\n    }\n  };\n}\n\nfunction createContextBlock(items) {\n  return {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": items.join(\" | \") // REMOVED JSON.stringify()\n      }\n    ]\n  };\n}\n\n// Validation function for Slack blocks\nfunction validateSlackBlocks(blocks) {\n  const issues = [];\n  \n  blocks.forEach((block, index) => {\n    if (!block.type) {\n      issues.push(`Block ${index}: Missing type field`);\n    }\n    \n    if (block.type === 'header' && block.text?.text) {\n      const textLength = block.text.text.length; // No need to JSON.parse since it's already a string\n      if (textLength > 150) {\n        issues.push(`Block ${index}: Header text too long (${textLength} chars)`);\n      }\n    }\n    \n    if (block.type === 'section' && !block.text?.text) {\n      issues.push(`Block ${index}: Section block missing text`);\n    }\n  });\n  \n  return issues;\n}\n\n// Process each error item and create Slack payload\nconst slackPayloads = [];\n\nitems.forEach((item, index) => {\n  try {\n    const errorData = item.json;\n    const context = errorData.slackContext || {};\n    \n    // Generate fallback text for accessibility\n    const fallbackText = `🔴 Workflow Error: ${context.workflowName || 'Unknown'} - ${context.shortMessage || 'Error occurred'} - Execution: ${context.executionId || 'Unknown'}`;\n    \n    // Determine error severity emoji\n    const severityEmoji = errorData._error ? \"⚠️\" : \"🔴\";\n    \n    // Build blocks array\n    const blocks = [\n      // Header with workflow name and error indicator\n      createHeaderBlock(`${severityEmoji} ${context.workflowName || 'Unknown Workflow'}`),\n      \n      // Primary error information\n      createKeyValueSection(\"Status\", \"Failed\"),\n      createKeyValueSection(\"Node\", context.nodeName || \"Unknown Node\"),\n      createKeyValueSection(\"Error Type\", context.errorType || \"Unknown\"),\n    ];\n    \n    // Add error code if available\n    if (context.errorCode) {\n      blocks.push(createKeyValueSection(\"Error Code\", context.errorCode));\n    }\n    \n    // Add execution ID\n    blocks.push(createKeyValueSection(\"Execution ID\", context.executionId || \"Unknown\"));\n    \n    // Add error message section\n    if (context.shortMessage) {\n      blocks.push(createErrorSection(context.shortMessage, 500));\n    }\n    \n    // Add stack trace info if available\n    if (context.hasStackTrace) {\n      blocks.push({\n        \"type\": \"section\",\n        \"text\": {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Stack Trace:* Available in error logs\" // REMOVED JSON.stringify()\n        }\n      });\n    }\n    \n    // Visual separator\n    blocks.push({ \"type\": \"divider\" });\n    \n    // Action buttons (if n8n web interface is accessible)\n    const actionsBlock = {\n      \"type\": \"actions\",\n      \"elements\": []\n    };\n    \n    // Add view logs button if we have execution ID\n    if (context.executionId && context.executionId !== 'Unknown') {\n      actionsBlock.elements.push({\n        \"type\": \"button\",\n        \"text\": {\n          \"type\": \"plain_text\",\n          \"text\": \"View Execution\"\n        },\n        \"style\": \"primary\",\n        \"url\": `https://your-n8n-instance.com/workflow/${errorData.WorkflowId}/executions/${context.executionId}`\n      });\n    }\n    \n    // Add retry button (generic workflow restart)\n    actionsBlock.elements.push({\n      \"type\": \"button\",\n      \"text\": {\n        \"type\": \"plain_text\",\n        \"text\": \"View Workflow\"\n      },\n      \"style\": \"primary\",\n      \"url\": `https://your-n8n-instance.com/workflow/${errorData.WorkflowId}`\n    });\n    \n    if (actionsBlock.elements.length > 0) {\n      blocks.push(actionsBlock);\n    }\n    \n    // Context footer with metadata\n    const contextItems = [\n      `🏷️ ID: ${errorData.ErrorLogId.substring(0, 8)}`,\n      `⏰ ${new Date(context.timestamp).toLocaleString()}`,\n    ];\n    \n    if (errorData.Mode) {\n      contextItems.push(`📋 Mode: ${errorData.Mode}`);\n    }\n    \n    blocks.push(createContextBlock(contextItems));\n    \n    // Create final Slack payload\n    const slackPayload = {\n      text: fallbackText,\n      blocks: blocks\n    };\n    \n    // Validate blocks before adding to output\n    const blockValidation = validateSlackBlocks(blocks);\n    if (blockValidation.length > 0) {\n      console.warn(`Block validation issues for item ${index}:`, blockValidation);\n      \n      // Create simple fallback if blocks are invalid\n      slackPayload.blocks = [\n        {\n          \"type\": \"section\",\n          \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": `🔴 *Workflow Error*\\n\\n*Workflow:* ${context.workflowName}\\n*Error:* ${safeSlackText(context.shortMessage, 200)}\\n*Execution:* ${context.executionId}` // REMOVED JSON.stringify()\n          }\n        }\n      ];\n    }\n    \n    slackPayloads.push({\n      json: slackPayload,\n      pairedItem: index\n    });\n    \n  } catch (error) {\n    console.error(`Failed to create Slack payload for item ${index}:`, error.message);\n    \n    // Create minimal fallback payload\n    slackPayloads.push({\n      json: {\n        text: `🔴 Error in workflow - Message generation failed`,\n        blocks: [\n          {\n            \"type\": \"section\",\n            \"text\": {\n              \"type\": \"mrkdwn\",\n              \"text\": `❌ *Message Generation Error*\\n\\nFailed to create notification for workflow error.\\nPlease check the error logs for details.` // REMOVED JSON.stringify()\n            }\n          }\n        ]\n      },\n      pairedItem: index\n    });\n  }\n});\n\nconsole.log(`Generated ${slackPayloads.length} Slack notifications`);\nreturn slackPayloads;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        0
      ],
      "id": "7fca9603-a55b-46da-982e-9b26e147aa3f",
      "name": "Slack Block Builder"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09709YKA2V",
          "mode": "list",
          "cachedResultName": "n8n-errors"
        },
        "messageType": "block",
        "blocksUi": "={ \"blocks\": {{JSON.stringify($json.blocks) }} }",
        "text": "={{ $json.text }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1024,
        0
      ],
      "id": "351e191d-a83a-41cc-a0bf-59dc31c231c4",
      "name": "Send a message",
      "webhookId": "29ffbdf5-47e5-460e-bbfa-315048c86ce3",
      "credentials": {
        "slackOAuth2Api": {
          "id": "0uM3ybFCDqqgYQ0Y",
          "name": "Slack account"
        }
      }
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "error": {
            "message": "Maximum number of redirects exceeded",
            "name": "Error [ERR_FR_TOO_MANY_REDIRECTS]",
            "stack": "Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded\n    at Function.AxiosError.from (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/axios@1.8.3/node_modules/axios/lib/core/AxiosError.js:92:14)\n    at RedirectableRequest.handleRequestError (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/axios@1.8.3/node_modules/axios/lib/adapters/http.js:620:25)\n    at RedirectableRequest.emit (node:events:530:35)\n    at ClientRequest.RedirectableRequest._onNativeResponse (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/follow-redirects@1.15.9/node_modules/follow-redirects/index.js:105:12)\n    at Object.onceWrapper (node:events:633:26)\n    at ClientRequest.emit (node:events:518:28)\n    at HTTPParser.parserOnIncomingClient (node:_http_client:716:27)\n    at HTTPParser.parserOnHeadersComplete (node:_http_common:117:17)\n    at TLSSocket.socketOnData (node:_http_client:558:22)\n    at TLSSocket.emit (node:events:518:28)\n    at Axios.request (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/axios@1.8.3/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at invokeAxios (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/n8n-core@file+packages+core_openai@5.8.1_ws@8.17.1_zod@3.25.67_/node_modules/n8n-core/src/execution-engine/node-execution-context/utils/request-helper-functions.ts:315:10)\n    at proxyRequestToAxios (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/n8n-core@file+packages+core_openai@5.8.1_ws@8.17.1_zod@3.25.67_/node_modules/n8n-core/src/execution-engine/node-execution-context/utils/request-helper-functions.ts:707:20)\n    at Object.request (/usr/local/lib/node_modules/n8n/node_modules/.pnpm/n8n-core@file+packages+core_openai@5.8.1_ws@8.17.1_zod@3.25.67_/node_modules/n8n-core/src/execution-engine/node-execution-context/utils/request-helper-functions.ts:1753:4)",
            "code": "ERR_FR_TOO_MANY_REDIRECTS"
          },
          "workflowName": "Test Workflow",
          "nodeName": "Node Alpha",
          "relatedEntityId": "foo-bar-biscuit-test",
          "relatedEntityType": "test entity type"
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Error Normalization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Normalization": {
      "main": [
        [
          {
            "node": "Insert in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert in Database": {
      "main": [
        [
          {
            "node": "Slack Block Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Block Builder": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ba586e24-781d-4fca-a2c7-d832e752ace7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8edd5d7e3ae181bc95a0413e7506e4b6ee1385f7be5a93f8cbfb6d9b5a737e91"
  },
  "id": "zN1hXVCaZEx0Gx7y",
  "tags": []
}